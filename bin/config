#!/usr/bin/env bash
#
# This script installs shell and program configuration files into the user's
# $HOME directory.
#

################################################################################
#                     START: Script Restriction Checks
################################################################################

readonly DOTFILES_DIR="${HOME}/.dotfiles_temp"


# Ensures that this script can execute correctly on this version of Bash.
source "${DOTFILES_DIR}/src/utils/bash_version.sh"
valid_bash_version || exit 1


# Ensures that this script is not executed with sudo.
source "${DOTFILES_DIR}/src/utils/prevent_sudo.sh"
executed_without_sudo || exit 1

################################################################################
#                       END: Script Restriction Checks
################################################################################


# Global Constants
readonly CONFIG_BASH_FILES=(
  "${DOTFILES_DIR}/config/bash/bashrc"
  "${DOTFILES_DIR}/config/bash/bash_profile"
)
readonly CONFIG_BASH_LOCAL_FILE="${DOTFILES_DIR}/config/bash/bashrc.local"
readonly CONFIG_VIM_FILES=( "${DOTFILES_DIR}/config/vim" )
readonly CONFIG_GHC_FILES=( "${DOTFILES_DIR}/config/ghc" )
readonly CONFIG_GIT_CONFIG_FILE="${DOTFILES_DIR}/config/git/gitconfig"
readonly CONFIG_GIT_IGNORE_FILE="${DOTFILES_DIR}/config/git/gitignore"
readonly CONFIG_INPUTRC_FILE="${DOTFILES_DIR}/config/inputrc"
CONFIG_ARG_ERROR='false'              # Set readonly after parsing arguments
CONFIG_ARG_HELP='false'               # Set readonly after parsing arguments
CONFIG_ARG_FORCE='false'              # Set readonly after parsing arguments
CONFIG_ARG_BASH='true'                # Set readonly after parsing arguments
CONFIG_ARG_BASH_LOCAL_REPLACE='false' # Set readonly after parsing arguments
CONFIG_ARG_VIM='true'                 # Set readonly after parsing arguments
CONFIG_ARG_GHC='true'                 # Set readonly after parsing arguments
CONFIG_ARG_GIT='true'                 # Set readonly after parsing arguments
CONFIG_ARG_GIT_CONFIG_REPLACE='false' # Set readonly after parsing arguments
CONFIG_ARG_GIT_SET_EXCLUDES='false'   # Set readonly after parsing arguments
CONFIG_ARG_INPUTRC='true'             # Set readonly after parsing arguments


# Imports Libraries
source "${DOTFILES_DIR}/src/lib/mrac.sh"


# Imports Utilities
source "${DOTFILES_DIR}/src/utils/message.sh"
source "${DOTFILES_DIR}/src/utils/confirmation.sh"


# Configures global variables from libraries/utilities
readonly MRAC_DISPLAY_ERR_MSG='true'
readonly DISPLAY_OUTPUT_MSG='true'
readonly DISPLAY_ERROR_MSG='true'


# Displays usage information
function usage() {
  cat <<-__EOF__
Usage: ${0##*/} [options]

Description:

  Creates symbolic links to various program and shell confguration files, to
  include:

    - Bash
    - Vim
    - Git
    - GHC
    - inputrc

Options:

  -h, --help                Displays this help message and exits.
  -f, --force               Attempts to create symbolic links to configuration
                            files without prompting for confirmation.
      --no-bash             Does not install Bash specific configuration files.
      --bash-local-replace  Signifies that an existing '\$HOME/.bashrc.local'
                            file is to be replaced by a blank templated version
                            of the file. The contents of the original
                            '\$HOME/.bashrc.local' file will be lost. This file
                            is intended to hold information for Bash that should
                            not be placed under version control. The
                            --no-bash option will overshadow this option, if
                            included.
      --no-vim              Does not install Vim specific configuration files.
      --no-ghc              Does not install GHC specific configuration files.
      --no-git              Does not install Git specific configuration files.
      -git-config-replace   Signifies that an existing '\$HOME/.gitconfig'
                            file is to be replaced by a blank templated version
                            of the file. The contents of the original
                            '\$HOME/.gitconfig' file will be lost. The --no-git
                            option will overshadow this option, if included.
      --git-set-excludes    Will set Git's core.excludesFile variable, for this
                            user, in '\$HOME/.gitconfig' (if present) to
                            '\$HOME/.gitignore' (if present). The contents of
                            '\$HOME/.gitignore' will apply globally. The
                            --no-git option will overshadow this option, if
                            included.
      --no-inputrc          Does not install the inputrc configuration file.
__EOF__
}


################################################################################
# Creates symbolic links for all provided files/directories into the user's
# $HOME directory.
# Globals:
#   HOME
#   FUNCNAME
#   CONFIG_ARG_FORCE
# Arguments:
#   Name of program (string)
#   One or more filepaths (strings)
# Outputs:
#   Writes symbolic link creation steps to stdout; writes error message(s) to
#   stderr.
# Returns:
#   0 if symbolic links successfully created; otherwise, non-zero on error.
################################################################################
function create_symlinks() {
  local program
  local files
  local link
  local target

  program="$1"
  shift &> /dev/null
  files=( "$@" )

  out_msg "\nSetting up ${program} configuration files..."
  out_msg "The following file(s) and/or directory(s) will be replaced (any" \
          "changes made will be lost):"
  local file
  for file in "${files[@]}"; do
    out_msg " - ${HOME}/.${file##*/}"
  done

  if [[ "${CONFIG_ARG_FORCE}" != 'true' ]]; then
    seek_confirmation
    if ! is_confirmed; then
      out_msg "Aborting; moving on."
      return 0
    fi
  fi

  for file in "${files[@]}"; do
    target="${file}"
    link="${HOME}/.${file##*/}"

    # Remove existing file/directory
    if [[ -e "${link}" ]]; then
      out_msg "Removing '${link}'..."
      if ! rm -rf "${link}" &> /dev/null; then
        err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to remove '${link}'."
        return 1
      fi
      out_msg "'${link}' successfully removed!"
    fi

    # Create symbolic link
    out_msg "Creating symbolic link from '${link}' (LINK) -> '${target}'" \
            "(TARGET)..."
    if ! ln -sf "${target}" "${link}"; then
      err_msg "ERROR: ${FUNCNAME[0]}() failed. Failed to create symbolic link."
      return 1
    fi
    out_msg "Symbolic link successfully created!"
  done
}


################################################################################
# Creates a copy of a specified file into the user's $HOME directory.
# Globals:
#   HOME
#   FUNCNAME
# Arguments:
#   Filepath (string)
#   Boolean string (indicates if an existing specified file in the user's $HOME
#                   directory should be replaced)
# Outputs:
#   Writes file creation steps to stdout; writes error message(s) to stderr.
# Returns:
#   0 if file successfully created; otherwise, non-zero on error.
################################################################################
function create_file_copy() {
  local orig_file="$1"
  local file="${HOME}/.${orig_file##*/}"
  local replace_file="$2"
  local file_created='false'

  out_msg "Verifying if '${file}' file exists..."

  if [[ -f "${file}" && -r "${file}" ]]; then
    out_msg "'${file}' file already exists!"
  else
    if [[ -e "${file}" ]]; then
      out_msg "'${file}' exists, but is not a regular readable file."
      out_msg "Removing '${file}'..."
      if ! rm -rf "${file}" &> /dev/null; then
        err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to remove '${file}'."
        return 1
      fi
      out_msg "'${file}' successfully removed!"
    fi

    out_msg "Creating '${file}' file..."
    if ! cp "${orig_file}" "${file}" &> /dev/null; then
      err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to create '${file}' file."
      return 1
    fi
    out_msg "'${file}' file successfully created!"
    file_created='true'
  fi

  if [[ "${replace_file}" == 'true' && "${file_created}" != 'true' ]]; then
    out_msg "Replacing '${file}' file..."
    out_msg "Removing existing '${file}' file..."
    if ! rm -rf "${file}" &> /dev/null; then
      err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to remove '${file}' file."
      return 1
    fi
    out_msg "'${file}' file successfully removed!"
    out_msg "Creating '${file}' file..."
    if ! cp "${orig_file}" "${file}" &> /dev/null; then
      err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to create '${file}' file"
      return 1
    fi
    out_msg "'${file}' file successfully created!"
    out_msg "'${file}' file successfully replaced!"
  fi
}


# Entry point of this script.
function main() {

  # Parses command line arguments. getopts and getopt (the default verion on
  # macOS) were not used since both do not support long options, and the
  # GNU getopt version cannot be installed until after parsing these arguments.
  local opt
  while (( $# > 0 )); do
    opt="$1"
    case "${opt}" in
      -h|--help)
        CONFIG_ARG_HELP='true'
        ;;
      -f|--force)
        CONFIG_ARG_FORCE='true'
        ;;
      --no-bash)
        CONFIG_ARG_BASH='false'
        ;;
      --bash-local-replace)
        CONFIG_ARG_BASH_LOCAL_REPLACE='true'
        ;;
      --no-vim)
        CONFIG_ARG_VIM='false'
        ;;
      --no-ghc)
        CONFIG_ARG_GHC='false'
        ;;
      --no-git)
        CONFIG_ARG_GIT='false'
        ;;
      --git-config-replace)
        CONFIG_ARG_GIT_CONFIG_REPLACE='true'
        ;;
      --git-set-excludes)
        CONFIG_ARG_GIT_SET_EXCLUDES='true'
        ;;
      --no-inputrc)
        CONFIG_ARG_INPUTRC='false'
        ;;
      -*|--*)
        err_msg "ERROR: Illegal option '${opt}' provided."
        CONFIG_ARG_ERROR='true'
        break
        ;;
      *)
        err_msg "ERROR: Unknown option '${opt}' provided."
        CONFIG_ARG_ERROR='true'
        break
        ;;
    esac
    shift
  done


  # Sets global constants as readonly
  readonly CONFIG_ARG_ERROR
  readonly CONFIG_ARG_HELP
  readonly CONFIG_ARG_FORCE
  readonly CONFIG_ARG_BASH
  readonly CONFIG_ARG_BASH_LOCAL_REPLACE
  readonly CONFIG_ARG_VIM
  readonly CONFIG_ARG_GHC
  readonly CONFIG_ARG_GIT
  readonly CONFIG_ARG_GIT_CONFIG_REPLACE
  readonly CONFIG_ARG_GIT_SET_EXCLUDES
  readonly CONFIG_ARG_INPUTRC


  # Displays usage information when invalid option(s) provided
  [[ "${CONFIG_ARG_ERROR}" == 'true' ]] && { usage; exit 1; }


  # Displays usage information, if requested
  [[ "${CONFIG_ARG_HELP}" == 'true' ]] && { usage; exit 0; }


  # Maintain sudo for the duration of this script
  ! mrac::renew &> /dev/null && out_msg  # Adds newline prior to sudo prompt
  mrac::maintain || exit 1


  out_msg "Attempting to setup configuration files..."


  # Setup Bash configuration files
  if [[ "${CONFIG_ARG_BASH}" == 'true' ]]; then
    local bashrc_local="${HOME}/.${CONFIG_BASH_LOCAL_FILE##*/}"

    create_symlinks 'Bash' "${CONFIG_BASH_FILES[@]}" || exit 1

    out_msg "'${bashrc_local}' is a file intended to store secret information;"
    out_msg "this file should not be placed under version control."
    create_file_copy "${CONFIG_BASH_LOCAL_FILE}" \
      "${CONFIG_ARG_BASH_LOCAL_REPLACE}" || exit 1
  fi


  # Setup VIM configuration files
  if [[ "${CONFIG_ARG_VIM}" == 'true' ]]; then
    create_symlinks 'Vim' "${CONFIG_VIM_FILES[@]}" || exit 1
  fi


  # Setup GHC configuration files
  if [[ "${CONFIG_ARG_GHC}" == 'true' ]]; then
    create_symlinks 'GHC' "${CONFIG_GHC_FILES[@]}" || exit 1
  fi


  # Setup GIT configuration files
  if [[ "${CONFIG_ARG_GIT}" == 'true' ]]; then
    local config_file="${HOME}/.${CONFIG_GIT_CONFIG_FILE##*/}"
    local excludes_file="${HOME}/.${CONFIG_GIT_IGNORE_FILE##*/}"

    create_symlinks 'Git' "${CONFIG_GIT_IGNORE_FILE}" || exit 1

    create_file_copy "${CONFIG_GIT_CONFIG_FILE}" \
      "${CONFIG_ARG_GIT_CONFIG_REPLACE}" || exit 1

    if [[ "${CONFIG_ARG_GIT_SET_EXCLUDES}" == 'true' ]]; then
      out_msg "Setting core.excludesFile variable, for this user, in" \
              "'${config_file}' to '${excludes_file}'..."
      if ! which git &> /dev/null; then
        err_msg "ERROR: Git does not appear to be installed. Please install" \
                "Git to continue."
        exit 1
      fi
      if ! git config --global core.excludesfile "${excludes_file}"; then
        err_msg "ERROR: Unable to set '${excludes_file}' as the" \
                "core.excludesFile variable."
        exit 1
      fi
      out_msg "core.excludesFile variable successfully set to" \
              "'${excludes_file}'!"
    fi
  fi

  # Setup inputrc configuration file
  if [[ "${CONFIG_ARG_INPUTRC}" == 'true' ]]; then
    create_symlinks 'inputrc' "${CONFIG_INPUTRC_FILE}" || exit 1
  fi
}


main "$@"
