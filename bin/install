#!/usr/bin/env bash
#
# Installation Script
#

################################################################################
#                     START: Script Restriction Checks
################################################################################

#
# TODO: Conditional WAS NOT tested to check if compliant with Bash versions < 3.
#
# Ensures that this script can execute correctly on this version of Bash.
if ! test $BASH_VERSINFO -ge "3"; then
  echo "ERROR: This script needs to be executed with Bash Version 3 or" \
       "higher." 1>&2
  exit 1
fi

# Ensures that the script is not executed with sudo.
if [[ -n "${SUDO_USER}" ]]; then
  echo "ERROR: Do not execute this script with sudo." >&2
  exit 1
fi

################################################################################
#                       END: Script Restriction Checks
################################################################################


# Global Constants
readonly DOTFILES_GIT_REMOTE='https://github.com/llovely/dotfiles.git'
readonly DOTFILES_GIT_TARBALL='https://github.com/llovely/dotfiles/tarball/main'
readonly DOTFILES_TARBALL='/tmp/dotfiles.tar.gz'
readonly DOTFILES_SYMLINK_LINK_NAME='.dotfiles_temp'
readonly DOTFILES_SYMLINK_DIR_NAME='dotfiles'   # LINK_NAME -> DIR_NAME
readonly DOTFILES_PARENT_DIR="${HOME}"
readonly DOTFILES_DIR="${DOTFILES_PARENT_DIR}/${DOTFILES_SYMLINK_LINK_NAME}"
         DOTFILES_INSTALL_PARENT_DIR='' # Set readonly after parsing arguments
         DOTFILES_INSTALL_DIR=''        # Set readonly after parsing arguments
INSTALL_ARG_ERROR='false'               # Set readonly after parsing arguments
INSTALL_ARG_HELP='false'                # Set readonly after parsing arguments
INSTALL_ARG_FORCE='false'               # Set readonly after parsing arguments
INSTALL_ARG_INSTALL_DIR='false'         # Set readonly after parsing arguments
INSTALL_ARG_SYNC='false'                # Set readonly after parsing arguments
INSTALL_ARG_PACKAGES='true'             # Set readonly after parsing arguments
INSTALL_ARG_DEFAULT_BASH='true'         # Set readonly after parsing arguments
INSTALL_ARG_CONFIG='true'               # Set readonly after parsing arguments
INSTALL_ARG_BASH_EXEC=''                # Set readonly after parsing arguments
INSTALL_OS_TYPE=''                      # Set readonly after being set


# Globals
INSTALL_SCRIPT_BREW_INSTALLED='false'
INSTALL_SCRIPT_XCODE_INSTALLED='false'
INSTALL_SCRIPT_APT_INSTALLED='false'
INSTALL_SCRIPT_GIT_INSTALLED='false'
INSTALL_SCRIPT_PKGS_INSTALLED='false'
INSTALL_SCRIPT_SHELL_DEFAULT_BASH='false'
INSTALL_SCRIPT_CONFIG_INSTALLED='false'
INSTALL_SCRIPT_DISPLAY_ERR_MSG='true'
INSTALL_SCRIPT_DISPLAY_OUT_MSG='true'


# Displays usage information
function usage() {
  cat <<-__EOF__
Usage: ${0##*/} [options]

Description:

  This is only a test...

Options:

  -h, --help                Displays this help message and exit.
  -f, --force               Forcibly overwrites an existing Dotfiles
                            installation, if encountered; any changes made
                            prior may be lost. The '.dotfiles' directory in
                            one's \$HOME directory will be overwritten. The
                            '.dotfiles' symbolic link in one's \$HOME
                            directory will be removed and a new link will be
                            created to point to the new Dotfiles installation
                            directory (see --install-dir option for more
                            details).
      --install-dir <path>  Directory path to place new Dotfiles installation;
                            installation will be placed in a directory named
                            directory named 'dotfiles'. A symbolic link from
                            '\$HOME/.dotfiles' will link to 'path/dotfiles'.
                            If the --force option is included, then any
                            existing 'path/dotfiles' directory will be
                            overwritten.
      --sync                Synchronizes the Dotfiles installation with the
                            remote repository and pulls the latest changes
                            from all included submodules. Synchronization
                            occurs using 'git pull --rebase'; this operation
                            may cause merge conflicts that will need to be
                            resolved manually. USE THIS AT YOUR OWN RISK.
      --no-packages         Does not install any packages.
      --no-default-bash     Does not set Bash as the user's default shell.
      --no-config           Does not overwrite existing program or shell
                            configuration files (e.g., .bashrc, .inputrc, .vim,
                            etc.).
__EOF__
}


################################################################################
# Writes message(s) to stderr.
# Globals:
#   INSTALL_SCRIPT_DISPLAY_ERR_MSG
# Arguments:
#   Message to display (string)
# Outputs:
#   Writes message(s) to stderr.
# Returns:
#   0 if message(s) display successfully; otherwise, non-zero on error.
################################################################################
function err_msg() {
  local messages="$*"

  [[ "${INSTALL_SCRIPT_DISPLAY_ERR_MSG}" == 'true' ]] \
    && printf "${messages}\n" >&2
}


################################################################################
# Writes message(s) to stdout.
# Globals:
#   INSTALL_SCRIPT_DISPLAY_OUT_MSG
# Arguments:
#   Message to display (string)
# Outputs:
#   Writes message(s) to stdout.
# Returns:
#   0 if message(s) display successfully; otherwise, non-zero on error.
################################################################################
function out_msg() {
  local messages="$*"

  [[ "${INSTALL_SCRIPT_DISPLAY_OUT_MSG}" == 'true' ]] \
    && printf "${messages}\n"
}


# Displays final message and clean up any temporary files
function cleanup() {
  local prev_exit_code="$?"  # Captures previous exit code

  err_msg "\nERROR: ${FUNCNAME[0]}() failed. NOT IMPLEMENTED."

  exit "${prev_exit_code}"
}


################################################################################
# Verifies that Homebrew is installed.
# Globals:
#   INSTALL_SCRIPT_BREW_INSTALLED
# Arguments:
#   None
# Outputs:
#   Writes installation steps to stdout; writes error message(s) to stderr.
# Returns:
#   0 if Homebrew installed successfully; otherwise, non-zero on error.
################################################################################
function verify_homebrew() {
  out_msg "\nVerifying if Homebrew is installed..."

  if brew::installed &> /dev/null; then
    out_msg "Homebrew is already installed!"
  else
    out_msg "Homebrew not found; installing..."
    brew::install || return 1
    out_msg "Homebrew is installed!"
  fi

  INSTALL_SCRIPT_BREW_INSTALLED='true'
}


################################################################################
# Verifies that Xcode Command Line Tools and/or Application is installed.
# Globals:
#   FUNCNAME
#   XCODE_APP_PATH
#   INSTALL_SCRIPT_XCODE_INSTALLED
#   INSTALL_SCRIPT_BREW_INSTALLED
# Arguments:
# Outputs:
# Returns:
################################################################################
function verify_xcode() {
  local xcode_path

  out_msg "\nVerifying if Xcode Command Line Tools are installed..."

  xcode_path="$(xcode::get_path)"
  (( $? != 0 )) && return 1

  if xcode::installed &> /dev/null; then
    if xcode::installed_app &> /dev/null; then
      out_msg "Xcode Application detected! Setting up..."
      xcode::reset > /dev/null || return 1
      xcode::switch "${XCODE_APP_PATH}" > /dev/null || return 1
      xcode::accept_license > /dev/null || return 1
      INSTALL_SCRIPT_XCODE_INSTALLED='true'
      out_msg "Xcode Command Line Tools (through Xcode Application) are" \
              "ready for use."
    elif xcode::installed_clt &> /dev/null; then
      out_msg "Xcode Command Line Tools detected! Setting up..."
      xcode::reset > /dev/null || return 1
      xcode::switch "${XCODE_CLT_PATH}" > /dev/null || return 1
      INSTALL_SCRIPT_XCODE_INSTALLED='true'
      out_msg "Xcode Command Line Tools are ready for use."
    else
      err_msg "ERROR: ${FUNCNAME[0]}() failed. Unknown active developer" \
              "directory '${xcode_path}' found."
      return 1
    fi
  else
    if [[ "${INSTALL_SCRIPT_BREW_INSTALLED}" == 'true' ]]; then
      err_msg "ERROR: ${FUNCNAME[0]}() failed. Xcode Command Line Tools" \
              "should have been installed with Homebrew."
    fi
    out_msg "\nPlease install Xcode Command Line Tools manually to proceed." \
            "The easiest way to install would be to download the Xcode" \
            "application through the Mac App Store or by executing the" \
            "following command in terminal:\n"
    out_msg "   xcode-select --install"
    return 1
  fi
}


################################################################################
# Verifies that the APT package manager is present.
# Globals:
#   FUNCNAME
# Arguments:
#   None
# Outputs:
#   Writes error message(s) to stderr.
# Returns:
#   1
################################################################################
function verify_apt() {
  out_msg "\nVerifying if APT package manager and utilities are installed..."

  if apt::installed; then
    out_msg "APT package manager and utilities are installed!"
  else
    err_msg "ERROR: ${FUNCNAME[0]}() failed. This linux distro may not be" \
            "using APT as its package manager. Installation of APT may cause" \
            "problems; therefore, aborting."
  fi

  INSTALL_SCRIPT_APT_INSTALLED='true'
}


################################################################################
# Verifies that the associated package managers of the supported OS's are
# present and have access to necessary utilities to function properly.
# Globals:
#   FUNCNAME
#   INSTALL_OS_TYPE
#   OS_NAME_MACOS
#   OS_NAME_DEBIAN
#   OS_NAME_UBUNTU
# Arguments:
#   None
# Outputs:
#   Writes installation/verification steps to stdout; writes error message(s) to
#   stderr.
# Returns:
#   0 if package manager and utilities present; otherwise, non-zero on error.
################################################################################
function verify_pkg_mgr_and_utils() {
  case "${INSTALL_OS_TYPE}" in
    "${OS_NAME_MACOS}")
      verify_homebrew || return 1
      verify_xcode || return 1
      ;;
    "${OS_NAME_DEBIAN}"|"${OS_NAME_UBUNTU}")
      verify_apt || return 1
      ;;
    *) # Unsupported OS type
      err_msg "ERROR: ${FUNCNAME[0]}() failed. Unknown OS type encountered."
      return 1
      ;;
  esac
}


################################################################################
# Install git (installation differs based on supported OS).
# Globals:
#   FUNCNAME
#   INSTALL_OS_TYPE
#   OS_NAME_MACOS
#   OS_NAME_DEBIAN
#   OS_NAME_UBUNTU
# Arguments:
#   None
# Outputs:
#   Writes installation steps to stdout; writes error message(s) to stderr.
# Returns:
#   0 if git installed successfully; otherwise, non-zero on error.
################################################################################
function install_git() {
  case "${INSTALL_OS_TYPE}" in
    "${OS_NAME_MACOS}")
      out_msg "\nInstalling git with Homebew..."
      if brew::installed_formula 'git' &> /dev/null; then
        out_msg "git is already installed!"
        return 0
      else
        brew::install_formula 'git' || return 1
      fi
      ;;
    "${OS_NAME_DEBIAN}"|"${OS_NAME_UBUNTU}")
      out_msg "\nInstalling git with APT..."
      if apt::installed_package 'git' &> /dev/null; then
        out_msg "git is already installed!"
        return 0
      else
        apt::install_package 'git' || return 1
      fi
      ;;
    *) # Unsupported OS type
      err_msg "ERROR: ${FUNCNAME[0]}() failed. Unknown OS type encountered."
      return 1
      ;;
  esac

  out_msg "git is installed and ready for use!"
  INSTALL_SCRIPT_GIT_INSTALLED='true'
}


################################################################################
# Downloads and unpacks Dotfile repository tarball into created Dotfiles
# directory.
# Globals:
#   FUNCNAME
#   INSTALL_ARG_FORCE
#   INSTALL_ARG_INSTALL_DIR
#   DOTFILES_SYMLINK_LINK_NAME
#   DOTFILES_SYMLINK_DIR_NAME
#   DOTFILES_DIR
#   DOTFILES_PARENT_DIR
#   DOTFILES_INSTALL_DIR
#   DOTFILES_INSTALL_PARENT_DIR
#   DOTFILES_TARBALL
#   DOTFILES_GIT_TARBALL
# Arguments:
#   None
# Outputs:
#   Writes download and setup steps to stdout; writes error message(s) to
#   stderr.
# Returns:
#   0 if Dotfiles repo unpacked and removed successfully; otherwise, non-zero
#   on error.
################################################################################
function dotfiles_get_repo() {
  out_msg "\nVerifying if '${DOTFILES_SYMLINK_LINK_NAME}' exists in" \
          "'${DOTFILES_PARENT_DIR}' directory..."

  # Removes existing dotfiles directory
  if [[ -d "${DOTFILES_DIR}" ]]; then
    if [[ "${INSTALL_ARG_FORCE}" != 'true' ]]; then
      out_msg "'${DOTFILES_SYMLINK_LINK_NAME}' directory already exists!" \
              "Directory will not be overwritten; moving on."
      return 0
    else
      out_msg "Removing '${DOTFILES_SYMLINK_LINK_NAME}' directory..."
    fi
  # Removes exising dotfiles symbolic link
  elif [[ -L "${DOTFILES_DIR}" ]]; then
    if [[ -e "${DOTFILES_DIR}" && "${INSTALL_ARG_FORCE}" != 'true' ]]; then
      out_msg "'${DOTFILES_SYMLINK_LINK_NAME}' already exists as an unbroken" \
              "symbolic link! Link will not be overwritten; moving on."
      return 0
    else
      out_msg "Removing '${DOTFILES_SYMLINK_LINK_NAME}' symbolic link..."
    fi
  # Removes any file with the same name as the dotfiles directory/synlink
  else
    out_msg "Removing any file with the name '${DOTFILES_SYMLINK_LINK_NAME}'..."
  fi
  if ! rm -rf "${DOTFILES_DIR}"; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to remove" \
            "'${DOTFILES_SYMLINK_LINK_NAME}'."
    return 1
  fi
  out_msg "'${DOTFILES_SYMLINK_LINK_NAME}' successfully removed!"


  # Removes symlink destination directory, if needed
  if [[ "${INSTALL_ARG_INSTALL_DIR}" == 'true' ]]; then
    out_msg "Installation directory provided; verifying if" \
            "'${DOTFILES_SYMLINK_DIR_NAME}' directory exists in" \
            "'${DOTFILES_INSTALL_PARENT_DIR}' directory..."
    if [[ -d "${DOTFILES_INSTALL_DIR}" \
          && "${INSTALL_ARG_FORCE}" != 'true' ]]; then
      out_msg "'${DOTFILES_SYMLINK_DIR_NAME}' directory already exists!" \
              "Directory will not be overwritten; moving on."
    else
      if [[ -d "${DOTFILES_INSTALL_DIR}" ]]; then
        out_msg "Removing '${DOTFILES_SYMLINK_DIR_NAME}' directory..."
      else
        out_msg "Removing any file with the name" \
                "'${DOTFILES_SYMLINK_DIR_NAME}'..."
      fi
      if ! rm -rf "${DOTFILES_INSTALL_DIR}"; then
        err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to remove" \
                "'${DOTFILES_SYMLINK_DIR_NAME}'."
        return 1
      fi
      out_msg "'${DOTFILES_SYMLINK_DIR_NAME}' successfully removed!"
    fi
  fi


  # Create dotfiles directory and/or symlink to it
  if [[ "${INSTALL_ARG_INSTALL_DIR}" == 'true' ]]; then
    if [[ ! -d "${DOTFILES_INSTALL_DIR}" ]]; then
      out_msg "Creating '${DOTFILES_SYMLINK_DIR_NAME}' directory in" \
              "'${DOTFILES_INSTALL_PARENT_DIR}' directory..."
      if ! mkdir -vp "${DOTFILES_INSTALL_DIR}"; then
        err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to create" \
                "'${DOTFILES_SYMLINK_DIR_NAME}' directory."
        return 1
      fi
      out_msg "'${DOTFILES_SYMLINK_DIR_NAME}' directory created!"
    fi
    out_msg "Creating symbolic link from '${DOTFILES_DIR}' (LINK) ->" \
            "'${DOTFILES_INSTALL_DIR}' (TARGET)..."
    if ! ln -sf "${DOTFILES_INSTALL_DIR}" "${DOTFILES_DIR}"; then
      err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to create symbolic" \
              "link '${DOTFILES_DIR}'."
      return 1
    fi
    out_msg "Symbolic link '${DOTFILES_DIR}' successfully created!"
  else
    out_msg "Creating '${DOTFILES_SYMLINK_LINK_NAME}' directory in" \
            "'${DOTFILES_PARENT_DIR}' directory..."
    if ! mkdir -vp "${DOTFILES_DIR}"; then
      err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to create" \
              "'${DOTFILES_SYMLINK_LINK_NAME}' directory."
      return 1
    fi
    out_msg "'${DOTFILES_SYMLINK_LINK_NAME}' directory created!"
  fi


  # Download Dotfiles tarball
  out_msg "Downloading Dotfiles tarball from '${DOTFILES_GIT_TARBALL}'..."
  if ! curl -fsSL ${DOTFILES_GIT_TARBALL} -o "${DOTFILES_TARBALL}"; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Failed to download Dotfiles" \
            "tarball."
    return 1
  fi
  out_msg "Dotfiles tarball downloaded successfully! Tarball located at: " \
          "'${DOTFILES_TARBALL}'"


  # Unpack Dotfiles tarball into Dotfiles directory
  out_msg "Unpacking tarball '${DOTFILES_TARBALL}' into '${DOTFILES_DIR}'..."
  tar -zxf "${DOTFILES_TARBALL}" --strip-components 1 -C "${DOTFILES_DIR}"
  if (( $? != 0 )); then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Failed to unpack tarball."
    return 1
  fi
  out_msg "Tarball successfully unpacked!"


  # Remove the downloaded Dotfiles tarball
  out_msg "Removing tarball '${DOTFILES_TARBALL}'..."
  if ! rm -rvf "${DOTFILES_TARBALL}"; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Failed to remove tarball."
    return 1
  fi
  out_msg "Tarball successfully removed!"
}


################################################################################
# Sets up Dotfiles directory as a git repository (main branch as remote).
# Globals:
#   FUNCNAME
#   DOTFILES_DIR
#   DOTFILES_GIT_REMOTE
# Arguments:
#   None
# Outputs:
#   Writes git repo setup steps to stdout; writes error message(s) to stderr.
# Returns:
#   0 if Dotfiles directory successfully setup as a git repository; otherwise,
#   non-zero on error.
################################################################################
function dotfiles_init_repo() {
  out_msg "\nVerifying if '${DOTFILES_DIR}' directory is a git repository..."

  # Checks if inside git repo
  if git rev-parse --is-inside-work-tree &> /dev/null; then
    out_msg "'${DOTFILES_DIR}' is already a git repository!"
    return 0
  fi
  out_msg "'${DOTFILES_DIR}' directory is not a git repository!"


  # Initialize Dotfiles directory as git repo
  out_msg "Initializing '${DOTFILES_DIR}' directory as a local git" \
          "repository..."
  if ! git init; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to initialize" \
            "'${DOTFILES_DIR}' directory as a local git repository."
    return 1
  fi
  out_msg "'${DOTFILES_DIR}' directory is now a local git repository!"


  # Add Dotfiles Github repository as remote origin
  out_msg "Adding '${DOTFILES_GIT_REMOTE}' as remote origin..."
  if ! git remote add origin "${DOTFILES_GIT_REMOTE}"; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to add" \
            "'${DOTFILES_GIT_REMOTE}' as the remote origin."
    return 1
  fi
  out_msg "'${DOTFILES_GIT_REMOTE}' is now the remote origin!"


  # Fetch changes from main branch
  out_msg "Fetching changes from 'main' branch of remote origin..."
  if ! git fetch origin main; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Failed to fetch" \
            "changes from 'main' branch of remote origin."
    return 1
  fi
  out_msg "Changes successfully fetched from 'main' branch!"


  # Reset the index and working tree to the fetched HEAD
  out_msg "Reverting to fetched HEAD commit (undoes local changes)..."
  if ! git reset --hard FETCH_HEAD; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to revert to fetched" \
            "HEAD commit."
    return 1
  fi
  out_msg "Reverting to fetched HEAD commit successful!"


  # Rename branch name to main
  out_msg "Renaming current branch to 'main'..."
  if ! git branch -m main; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to rename current branch" \
            "to 'main'."
    return 1
  fi
  out_msg "Current branch is now named 'main'!"


  # Sets main branch upstream branch to origin main
  out_msg "Setting 'main' branch's upstream branch to origin/main..."
  if ! git branch --set-upstream-to=origin/main main; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to set origin/main as" \
            "'main' branch's upstream branch."
    return 1 
  fi
  out_msg "origin/main is now the 'main' branch's upstream branch!"


  # Remove all untracked files
  out_msg "Removing all untracked files..."
  if ! git clean -fd; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Failed to remove all untracked" \
            "files."
    return 1
  fi
  out_msg "Succesfully removed all untracked files!"


  # Initialize all submodules
  out_msg "Initializing submodules in this repository..."
  if ! git submodule update --init --recursive; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Failed initialize submodules."
    return 1
  fi
  out_msg "Successfully initialized all submodules!"
}


################################################################################
# Synchronizes changes from main branch of remote Dotfiles repository.
# Globals:
#   FUNCNAME
#   DOTFILES_DIR
#   DOTFILES_GIT_REMOTE
# Arguments:
#   None
# Outputs:
#   Writes git repo setup steps to stdout; writes error message(s) to stderr.
# Returns:
#   0 if Dotfiles directory successfully setup as a git repository; otherwise,
#   non-zero on error.
################################################################################
function dotfiles_sync_repo() {
  out_msg "\nSynchronizing with remote Dotfiles repository..."

  # Pull latest changes
  out_msg "Attempting to pull latest changes..."
  if ! git pull --rebase --auto-stash origin main; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Failed to pull latest changes" \
            "OR merge conflicts need to be resolved separately."
    return 1
  fi
  out_msg "Latest changes successfully pulled!"


  # Initializing and/or pulling latest changes on submodules
  out_msg "Attempting to pull latest changes from subdmodules..."
  if ! git submodule update --init --recursive --remote --merge --force; then
    err_msg "ERROR: ${FUNCNAME[0]}() failed. Failed to pull latest changes."
    return 1
  fi
  out_msg "Latest submodule changes successfully pulled!"
}


################################################################################
#
# Globals:
# Arguments:
# Outputs:
# Returns:
################################################################################
function default_shell_bash() {
  local bash_path

  out_msg "\nVerifying that Bash is installed..."
  case "${INSTALL_OS_TYPE}" in
    "${OS_NAME_MACOS}")
      if brew::installed_formula 'bash' &> /dev/null; then
        out_msg "Bash is installed with Homebrew!"
      else
        out_msg "Bash is not installed with Homebrew; installing..."
        brew::install_formula 'bash' || return 1
        out_msg "Bash is now installed with Homebrew!"
      fi
      bash_path="$(which bash 2> /dev/null)"
      if (( $? != 0 )); then
        err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to locate path to" \
                "Bash executable."
        return 1
      fi 
      ;;
    "${OS_NAME_DEBIAN}"|"${OS_NAME_UBUNTU}")
      if apt::installed_package 'bash' &> /dev/null; then
        out_msg "Bash is installed with APT!"
      else
        out_msg "Bash is not installed with APT; installing..."
        apt::install_package 'bash' || return 1
        out_msg "Bash is now installed with APT!"
      fi
      bash_path="$(which bash 2> /dev/null)"
      if (( $? != 0 )); then
        err_msg "ERROR: ${FUNCNAME[0]}() failed. Unable to locate path to" \
                "Bash executable."
        return 1
      fi 
      ;;
    *) # Unsupported OS type
      err_msg "ERROR: ${FUNCNAME[0]}() failed. Unknown OS type encountered."
      return 1
      ;;
  esac

  "${DOTFILES_DIR}/bin/default_shell" --shell "${bash_path}" --add-list --force
}


# Entry point of this script.
function main() {

  # Parses command line arguments. getopts and getopt (the default verion on
  # macOS) were not used since both do not support long options, and the
  # GNU getopt version cannot be installed until after parsing these arguments.
  local opt
  while (( $# > 0 )); do
    opt="$1"
    case "${opt}" in
      -h|--help)
        INSTALL_ARG_HELP='true'
        ;;
      -f|--force)
        INSTALL_ARG_FORCE='true'
        ;;
      --install-dir)
        shift
        if (( $# == 0 )); then
          err_msg "ERROR: '${opt}' option -- Expected a directory path"
                  "argument."
          INSTALL_ARG_ERROR='true'
          break
        fi
        case "$1" in
          -*|--*)
            err_msg "ERROR: '${opt}' option -- Expected a directory path" \
                    "arguement."
            INSTALL_ARG_ERROR='true'
            break
            ;;
          *)
            if [[ ! -d "$1" ]]; then
              err_msg "ERROR: '${opt}' option -- '$1' argument is not a" \
                      "directory path."
              INSTALL_ARG_ERROR='true'
              break
            elif [[ "$1" == */ ]]; then
              err_msg "ERROR: '${opt}' option -- '$1' argument cannot end" \
                      "with a '/'."
              INSTALL_ARG_ERROR='true'
              break
            else
              INSTALL_ARG_INSTALL_DIR='true'
              DOTFILES_INSTALL_PARENT_DIR="$1"
              DOTFILES_INSTALL_DIR="${1}/${DOTFILES_SYMLINK_DIR_NAME}"
            fi
            ;;
        esac
        ;;
      --sync)
        INSTALL_ARG_SYNC='true'
        ;;
      --no-packages)
        INSTALL_ARG_PACKAGES='false'
        ;;
      --no-default-bash)
        INSTALL_ARG_DEFAULT_BASH='false'
        ;;
      --no-config)
        INSTALL_ARG_CONFIG='false'
        ;;
      -*|--*)
        err_msg "ERROR: Illegal option '${opt}' provided."
        INSTALL_ARG_ERROR='true'
        break
        ;;
      *)
        err_msg "ERROR: Unknown option '${opt}' provided."
        INSTALL_ARG_ERROR='true'
        break
        ;;
    esac
    shift
  done
  if [[ "${INSTALL_ARG_INSTALL_DIR}" == 'true' ]]; then
    # Check if provided installation directory is the same
    if [[ "${DOTFILES_INSTALL_PARENT_DIR}" -ef "${DOTFILES_PARENT_DIR}" ]]; then
      INSTALL_ARG_INSTALL_DIR='false'
      DOTFILES_INSTALL_PARENT_DIR=''
      DOTFILES_INSTALL_DIR=''
    fi
  fi

  
  # Sets global constants as readonly
  readonly INSTALL_ARG_ERROR
  readonly INSTALL_ARG_HELP
  readonly INSTALL_ARG_FORCE
  readonly INSTALL_ARG_INSTALL_DIR
  readonly INSTALL_ARG_SYNC
  readonly INSTALL_ARG_PACKAGES
  readonly INSTALL_ARG_DEFAULT_BASH
  readonly INSTALL_ARG_CONFIG
  readonly DOTFILES_INSTALL_PARENT_DIR
  readonly DOTFILES_INSTALL_DIR


  # Displays usage information when invalid option(s) provided
  [[ "${INSTALL_ARG_ERROR}" == 'true' ]] && { usage; exit 1; }


  # Displays usage information, if requested
  [[ "${INSTALL_ARG_HELP}" == 'true' ]] && { usage; exit 0; }


  # Prompt user for password
  sudo -p "%p, please enter your password to continue: " true &> /dev/null


  trap 'cleanup' EXIT


  # Downloads contents of the Dotfiles git repository
  dotfiles_get_repo || exit 1


  # Enter Dotfiles directory
  cd "${DOTFILES_DIR}"


  # Imports Libraries
  source "${DOTFILES_DIR}/src/lib/apt.sh"
  source "${DOTFILES_DIR}/src/lib/brew.sh"
  source "${DOTFILES_DIR}/src/lib/mrac.sh"
  source "${DOTFILES_DIR}/src/lib/os.sh"
  source "${DOTFILES_DIR}/src/lib/xcode.sh"


  # Configures global variables from libraries/utilities
  readonly APT_BUNDLE_DIR="${DOTFILES_DIR}/packages"
  readonly APT_DISPLAY_ERR_MSG='true'
  readonly BREW_BUNDLE_DIR="${DOTFILES_DIR}/packages"
  readonly BREW_DISPLAY_ERR_MSG='true'
  readonly MRAC_DISPLAY_ERR_MSG='true'
  readonly OS_DISPLAY_ERR_MSG='true'
  readonly XCODE_DISPLAY_ERR_MSG='true'


  # Maintain sudo for the duration of this script
  ! mrac::renew &> /dev/null && out_msg  # Adds newline prior to sudo prompt
  mrac::maintain || exit 1


  # Ensures that only a supported OS can run this script
  os::supported || exit 1


  # Obtains OS lineage/type
  INSTALL_OS_TYPE="$(os::type)"
  (( $? != 0 )) && exit 1
  readonly INSTALL_OS_TYPE


  # Ensures that the OS package manager is present and has all necessary
  # packages/utilities to function properly
  verify_pkg_mgr_and_utils || exit 1


  # Installs git
  install_git || exit 1


  # Initialize Dotfiles directory as a local git repository
  dotfiles_init_repo || exit 1


  # Synchronizes Dotfiles directory with remote repository
  if [[ "${INSTALL_ARG_SYNC}" == 'true' ]]; then
    dotfiles_sync_repo || exit 1
  fi


  # Installs packages
  # [[ "${INSTALL_ARG_PACKAGES}" == 'true' ]] && : || exit 1


  # Make Bash the user's default shell
  if [[ "${INSTALL_ARG_DEFAULT_BASH}" == 'true' ]]; then
    default_shell_bash || exit 1
  fi

  # Overwrite configuration files with those in the Dotfiles installation
  # [[ "${INSTALL_ARG_CONFIG}" == 'true' ]] && : || exit 1
}


main "$@"
